{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Given:\
\
Legal Assignments:\
u = z; \
x = b; \
g = u; \
x = u;\
\
Illegal Assignments:\
u = b; \
x = g;\
b = u; \
z = u; \
g = x;\
\
- Since z can be casted to u, it means that U is parent of / interface implemented by Z. \
- Since b can be casted to x, it means that X is parent of / interface implemented by B. \
- Since u can be casted to g, it means that G is parent of / interface implemented by U. \
- Since u can be casted to x, it means that X is parent of / interface implemented by U. \
\
- Since b cannot be casted to u, this means that b is not a subclass (Child) of u or cannot implement u (does not inherit from u).\
- g is not a child of x and cannot implement it (does not inherit from x). The counterpart is true in this case\
- z is a child of u, not vice versa, as mentioned above.\
\
Possible answer:\
- u is a class that implements x and extends g\
- x is an interface \
- g is a class\
- z is a class\
}